#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <BleCombo.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int modeButtonPin = 5; // Onboard button = 0
const int actionButtonPin = 4; // External switch

String modes[] = {"Regular\nClick", "Quick\nClick", "Timed\nClick", "Regular\nSpace", "Quick\nSpace", "Timed\nSpace"};
unsigned long mediaDurations[] = {5000, 10000, 20000, 45000, 60000}; // 5s, 10s, 20s, 45s, 60s
int currentModeIndex = 0, currentDurationIndex = 0;
unsigned long lastActionButtonPress = 0, lastModeButtonPress = 0, lastIncrementTime = 0;
const unsigned long debounceDelay = 50; // Debounce delay in milliseconds
const unsigned long longPressInterval = 1100; // Long press interval for Timed Click/Space modes
const unsigned long repeatInterval = 600; // Repeat interval for continuous increment
const unsigned long doubleClickGuardDuration = 1100; // Duration to prevent double click
bool isButtonPressed = false, isTimerActive = false, modeButtonLongPressed = false;
unsigned long timerEndTime = 0;

// Variables for debounce algorithm
unsigned long lastDebounceTimeAction = 0;
bool lastButtonStateAction = HIGH;
bool buttonStateAction = HIGH;

// Function to handle debouncing
bool debouncedButtonState(int buttonPin) {
  bool reading = digitalRead(buttonPin);
  if (reading != lastButtonStateAction) {
    lastDebounceTimeAction = millis();
  }

  if ((millis() - lastDebounceTimeAction) > debounceDelay) {
    if (reading != buttonStateAction) {
      buttonStateAction = reading;
    }
  }

  lastButtonStateAction = reading;
  return buttonStateAction;
}

void setup() {
  Serial.begin(115200);
  Serial.println("Starting BLE work!");

  pinMode(modeButtonPin, INPUT_PULLUP);
  pinMode(actionButtonPin, INPUT_PULLUP);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();

  Keyboard.begin();
  Mouse.begin();

  updateDisplay();
}

void loop() {
  handleModeButton();
  handleActionButton();
  checkTimer();

  if (isTimerActive) {
    displayProgressBar();
    delay(100); // Small delay for smoother progress bar update
  }
}

void handleModeButton() {
  bool currentPress = digitalRead(modeButtonPin) == LOW;
  unsigned long currentMillis = millis();
  static unsigned long buttonPressStartTime = 0;

  if (currentPress) {
    if (!lastModeButtonPress) {
      lastModeButtonPress = currentMillis;
      buttonPressStartTime = currentMillis;
      modeButtonLongPressed = false;
      if (isTimerActive) {
        // Cancel the timer if it is active
        isTimerActive = false;
        if (currentModeIndex < 3) {
          Mouse.click(MOUSE_LEFT); // Click to stop the media for Click modes
        } else {
          Keyboard.write(' '); // Space to stop the media for Space modes
        }
        updateDisplay();
        return;
      }
    } else if ((currentModeIndex == 2 || currentModeIndex == 5) && (currentMillis - buttonPressStartTime >= longPressInterval)) {
      if (currentMillis - lastModeButtonPress >= repeatInterval) {
        cycleDuration();
        updateDisplay();
        lastModeButtonPress = currentMillis; // Update time for repeat action
        modeButtonLongPressed = true; // Mark as long pressed
      }
    }
  } else if (lastModeButtonPress) {
    if (!modeButtonLongPressed && (currentMillis - lastModeButtonPress >= debounceDelay) && (currentMillis - buttonPressStartTime < longPressInterval)) {
      // Short press - cycle modes
      cycleModes();
      updateDisplay();
    }
    lastModeButtonPress = 0; // Reset the button press flag
  }
}

void handleActionButton() {
  if (isTimerActive) {
    return; // Ignore button presses if the timer is active
  }

  bool currentPress = !debouncedButtonState(actionButtonPin);
  unsigned long currentMillis = millis();

  if (currentPress && (currentMillis - lastActionButtonPress > debounceDelay)) {
    if (!isButtonPressed) {
      isButtonPressed = true;
      performAction();
      lastActionButtonPress = currentMillis;
    }
  } else if (!currentPress && isButtonPressed) {
    isButtonPressed = false;
    lastActionButtonPress = currentMillis;
    releaseAction();
    updateDisplay();
  }
}

void standardQuickClickHandler(bool currentPress) {
  if (!isTimerActive && currentPress && !isButtonPressed) {
    isButtonPressed = true;
    performAction();
    lastActionButtonPress = millis();
  } else if (!currentPress && isButtonPressed) {
    isButtonPressed = false;
    releaseAction();
    updateDisplay();
  }
}

void timedClickHandler(bool currentPress) {
  if (!isTimerActive && currentPress && !isButtonPressed) {
    isButtonPressed = true;
    performAction();
    lastActionButtonPress = millis();
  } else if (!currentPress && isButtonPressed) {
    isButtonPressed = false;
    releaseAction();
    updateDisplay();
  }
}

void checkTimer() {
  if (isTimerActive && millis() >= timerEndTime) {
    isTimerActive = false;
    if (currentModeIndex == 2) {
      Mouse.click(MOUSE_LEFT); // Perform the final click action for Click modes
    } else if (currentModeIndex == 5) {
      Keyboard.write(' '); // Perform the final space action for Space modes
    }
    updateDisplay();
  }
}

void cycleModes() {
  currentModeIndex = (currentModeIndex + 1) % (sizeof(modes) / sizeof(String));
}

void cycleDuration() {
  currentDurationIndex = (currentDurationIndex + 1) % (sizeof(mediaDurations) / sizeof(unsigned long));
}

void updateDisplay() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(modes[currentModeIndex]);

  if ((currentModeIndex == 2 || currentModeIndex == 5) && !isTimerActive) {
    display.setCursor(0, 50);
    display.print("Timer: ");
    display.print(mediaDurations[currentDurationIndex] / 1000);
    display.println("s");
  }
  display.display();
}

void displayProgressBar() {
  unsigned long remainingTime = timerEndTime - millis();
  float progress = (float)remainingTime / (float)mediaDurations[currentDurationIndex];
  progress = constrain(progress, 0, 1);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(modes[currentModeIndex]);

  int progressBarHeight = 6;
  int progressBarY = 50;
  int progressBarWidth = (int)(128 * progress);

  display.fillRect(0, progressBarY, progressBarWidth, progressBarHeight, SSD1306_WHITE);
  display.display();
}

void performAction() {
  if (Keyboard.isConnected()) {
    switch (currentModeIndex) {
      case 0: // Standard Click
        Mouse.press(MOUSE_LEFT);
        break;
      case 1: // Quick Click
        Mouse.click(MOUSE_LEFT);
        break;
      case 2: // Timed Click
        Mouse.click(MOUSE_LEFT);
        timerEndTime = millis() + mediaDurations[currentDurationIndex];
        isTimerActive = true;
        break;
      case 3: // Regular Space
        Keyboard.press(' ');
        break;
      case 4: // Quick Space
        Keyboard.write(' ');
        break;
      case 5: // Timed Space
        Keyboard.write(' ');
        timerEndTime = millis() + mediaDurations[currentDurationIndex];
        isTimerActive = true;
        break;
    }
  }
}

void releaseAction() {
  if (currentModeIndex == 0) {
    Mouse.release(MOUSE_LEFT);
  } else if (currentModeIndex == 3) {
    Keyboard.release(' ');
  }
}
